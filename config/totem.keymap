//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define Base        0
#define Media       1
#define Nav         2
#define Mouse       3
#define Sym         4
#define Num         5
#define Fun         6
#define Button      7
#define Game        8
#define Gameplus    9

&sk { release-after-ms = <60000>; };

/ {
    behaviors {
        KP_DOT_SHIFT_COMMA: KP_DOT_SHIFT_COMMA {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_DOT_SHIFT_COMMA";
            bindings = <&kp RBKT>, <&kp LBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        KP_COLON_SHIFT_SEMICOLON: KP_COLON_SHIFT_SEMICOLON {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_COLON_SHIFT_SEMICOLON";
            bindings = <&kp LS(RBKT)>, <&kp LS(LBKT)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        UBER_DOT: UBER_DOT {
            compatible = "zmk,behavior-mod-morph";
            label = "UBER_DOT";
            bindings = <&KP_DOT_SHIFT_COMMA>, <&KP_COLON_SHIFT_SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        KP_RU_E_ALT_RU_YO: KP_RU_E_ALT_RU_YO {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_RU_E_ALT_RU_YO";
            bindings = <&kp T>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        KP_RU_MZ_ALT_RU_TZ: KP_RU_MZ_ALT_RU_TZ {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_RU_MZ_ALT_RU_TZ";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_LALT)>;
        };

        KP_RU_ZH_ALT_RU_H: KP_RU_ZH_ALT_RU_H {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_RU_ZH_ALT_RU_H";
            bindings = <&kp SEMICOLON>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_LALT)>;
        };

        KP_QT_SHIFT_DQT: KP_QT_SHIFT_DQT {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_QT_SHIFT_DQT";
            bindings = <&kp SQT>, <&kp DQT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        KP_SQTDQT_CTRL_GRAVE: KP_SQTDQT_CTRL_GRAVE {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_SQTDQT_CTRL_GRAVE";
            bindings = <&KP_QT_SHIFT_DQT>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        KP_SL_SHIFT_BSL: KP_SL_SHIFT_BSL {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_SL_SHIFT_BSL";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        KP_SL_BSL_CTRL_PIPE: KP_SL_BSL_CTRL_PIPE {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_SL_BSL_CTRL_PIPE";
            bindings = <&KP_SL_SHIFT_BSL>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        sticky_forever: sticky_forever {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_FOREVER";
            bindings = <&kp>;
            #binding-cells = <1>;
            ignore-modifiers;
            release-after-ms = <1800000>;
        };

        sm_LCTRL: sm_LCTRL {
            compatible = "zmk,behavior-mod-morph";
            label = "SM_LCTRL";
            bindings = <&sticky_forever LCTRL>, <&m_release_key_twice LCTRL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };

        sm_LSHIFT: sm_LSHIFT {
            compatible = "zmk,behavior-mod-morph";
            label = "SM_LSHIFT";
            bindings =
                <&sticky_forever LEFT_SHIFT>,
                <&m_release_key_twice LSHIFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        sm_LALT: sm_LALT {
            compatible = "zmk,behavior-mod-morph";
            label = "SM_LALT";
            bindings = <&sticky_forever LEFT_ALT>, <&m_release_key_twice LALT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        sm_LGUI: sm_LGUI {
            compatible = "zmk,behavior-mod-morph";
            label = "SM_LGUI";
            bindings = <&sticky_forever LEFT_GUI>, <&m_release_key_twice LGUI>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        caps_word_shift: caps_word_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_WORD_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        tabber: tabber {
            compatible = "zmk,behavior-mod-morph";
            label = "TABBER";
            bindings = <&m_hold_mod_press_key LCTRL TAB>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };

        swapper_win: swapper_win {
            compatible = "zmk,behavior-mod-morph";
            label = "SWAPPER_WIN";
            bindings = <&m_hold_mod_press_key LALT TAB>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        swapper_mac: swapper_mac {
            compatible = "zmk,behavior-mod-morph";
            label = "SWAPPER_MAC";
            bindings = <&m_hold_mod_press_key LGUI TAB>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        extra-nav-left {
            bindings = <&mo 4>;
            key-positions = <33 34>;
        };

        enter-left {
            bindings = <&kp ENTER>;
            key-positions = <25 24>;
        };

        enter-right {
            bindings = <&kp ENTER>;
            key-positions = <27 26>;
        };

        delete-left {
            bindings = <&kp DEL>;
            key-positions = <3 4>;
        };

        delete-right {
            bindings = <&kp DEL>;
            key-positions = <5 6>;
        };

        extra-nav-right {
            bindings = <&mo 4>;
            key-positions = <35 36>;
        };

        esc_left {
            bindings = <&kp ESCAPE>;
            key-positions = <4 14>;
        };

        esc_right {
            bindings = <&kp ESCAPE>;
            key-positions = <5 15>;
        };

        LANG {
            bindings = <&kp CAPS>;
            key-positions = <32 37>;
        };
    };

    macros {
        la: la {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp 0>,
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>;

            label = "LA";
        };

        m_release_key_twice: m_release_key_twice {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "M_RELEASE_KEY_TWICE";
        };

        m_hold_mod_press_key: m_hold_mod_press_key {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>;

            label = "M_HOLD_MOD_PRESS_KEY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
         &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y  &kp U  &kp I      &kp O    &kp P
         &kp A  &kp S  &kp D             &kp F  &kp G        &kp H  &kp J  &kp K      &kp L    &kp SEMI
&kp TAB  &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &UBER_DOT
                       &caps_word_shift  &la 3  &kp SPACE    &mo 2  &la 1  &kp RALT
            >;
        };

        Num {
            bindings = <
           &kp KP_N1  &kp KP_N2       &kp KP_N3      &kp KP_N4       &kp KP_N5          &kp KP_N6  &kp KP_N7  &kp KP_N8   &kp KP_N9  &kp KP_N0
           &kp F11    &kp LEFT_ARROW  &kp UP_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp F12    &sm_LCTRL  &sm_LSHIFT  &sm_LALT   &sm_LGUI
&kp MINUS  &kp F1     &kp F2          &kp F3         &kp F4          &kp F5             &kp F6     &kp F7     &kp F8      &kp F9     &kp F10    &UBER_DOT
                                      &kp BACKSPACE  &kp DELETE      &kp ENTER          &trans     &trans     &trans
            >;
        };

        Sym {
            bindings = <
          &kp N1   &kp N2     &kp N3         &kp N4      &kp N5             &kp N6            &kp RA(COMMA)  &kp LS(RBKT)  &kp LS(LBKT)  &kp SEMI
          &kp N7   &kp SQT    &kp RA(DOT)    &kp N9      &kp RA(LS(DOT))    &kp LS(RA(FSLH))  &kp N0         &kp RA(FSLH)  &kp DQT       &kp RBKT
&kp PIPE  &kp BSL  &kp GRAVE  &kp UNDER      &kp EQUAL   &kp RA(O)          &kp RA(P)         &kp PLUS       &kp MINUS     &kp N8        &kp BSLH  &kp LBKT
                              &kp BACKSPACE  &kp DELETE  &kp ENTER          &trans            &trans         &trans
            >;
        };

        Nav {
            bindings = <
        &tabber           &swapper_win       &swapper_mac  &trans     &kp ESC    &trans          &trans          &trans        &kp BSPC         &kp DELETE
        &sm_LGUI          &sm_LALT           &sm_LSHIFT    &sm_LCTRL  &kp RET    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans  &kp LC(LG(LEFT))  &kp LG(LC(RIGHT))  &trans        &kp PSCRN  &trans     &kp HOME        &kp PG_DN       &kp PG_UP     &kp END          &trans      &kp KP_NUM
                                             &trans        &trans     &trans     &trans          &trans          &trans
            >;
        };

        ExtraNav {
            bindings = <
        &trans  &trans          &trans        &trans          &trans             &trans          &trans          &trans        &trans           &trans
        &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans          &trans        &trans          &trans             &trans          &trans          &trans        &trans           &trans  &trans
                                &trans        &trans          &trans             &trans          &trans          &trans
            >;
        };

        Button {
            bindings = <
        &kp KP_NUMLOCK  &trans  &trans  &trans  &trans    &kp C_VOL_UP  &kp C_BRI_UP  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &trans  &bt BT_SEL 0
        &trans          &trans  &trans  &trans  &trans    &kp C_VOL_DN  &kp C_BRI_DN  &trans                             &trans  &bt BT_SEL 1
&tog 6  &trans          &trans  &trans  &trans  &trans    &kp C_MUTE    &trans        &trans                             &trans  &bt BT_SEL 2  &bt BT_CLR_ALL
                                &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };

        Gaming {
            bindings = <
         &kp ESCAPE        &kp Q  &kp X         &kp E  &kp R        &trans  &trans          &trans          &trans           &trans
         &kp LEFT_SHIFT    &kp A  &kp W         &kp D  &kp F        &trans  &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &trans
&kp TAB  &kp LEFT_CONTROL  &kp Z  &kp S         &kp C  &kp V        &trans  &trans          &kp DOWN_ARROW  &trans           &trans  &to 0
                                  &kp LEFT_ALT  &mo 7  &kp SPACE    &trans  &trans          &trans
            >;
        };

        Gaming+ {
            bindings = <
         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &trans  &trans  &trans  &trans  &kp LC(RA(DEL))
         &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0    &kp F5  &trans  &trans  &trans  &trans
&kp TAB  &kp Y         &kp U         &kp I         &kp O         &kp P           &trans  &trans  &trans  &trans  &trans           &kp LA(F4)
                                     &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        btn_layer {
            if-layers = <1 3>;
            then-layer = <5>;
        };
    };
};
