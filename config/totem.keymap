//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define Base        0
#define Media       1
#define Nav         2
#define Mouse       3
#define Sym         4
#define Num         5
#define Fun         6
#define Button      7
#define Game        8
#define Gameplus    9

&sk { release-after-ms = <60000>; };

/ {
    chosen {
        zmk,charmap = &charmap_us;
    };

    behaviors {
        KP_DOT_SHIFT_COMMA: KP_DOT_SHIFT_COMMA {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_DOT_SHIFT_COMMA";
            bindings = <&kp PERIOD>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        KP_COLON_SHIFT_SEMICOLON: KP_COLON_SHIFT_SEMICOLON {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_COLON_SHIFT_SEMICOLON";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        UBER_DOT: UBER_DOT {
            compatible = "zmk,behavior-mod-morph";
            label = "UBER_DOT";
            bindings = <&KP_DOT_SHIFT_COMMA>, <&KP_COLON_SHIFT_SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        KP_RU_E_ALT_RU_YO: KP_RU_E_ALT_RU_YO {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_RU_E_ALT_RU_YO";
            bindings = <&kp T>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        KP_RU_MZ_ALT_RU_TZ: KP_RU_MZ_ALT_RU_TZ {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_RU_MZ_ALT_RU_TZ";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_LALT)>;
        };

        KP_RU_ZH_ALT_RU_H: KP_RU_ZH_ALT_RU_H {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_RU_ZH_ALT_RU_H";
            bindings = <&kp SEMICOLON>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_LALT)>;
        };

        KP_QT_SHIFT_DQT: KP_QT_SHIFT_DQT {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_QT_SHIFT_DQT";
            bindings = <&kp SQT>, <&kp DQT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        KP_SQTDQT_CTRL_GRAVE: KP_SQTDQT_CTRL_GRAVE {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_SQTDQT_CTRL_GRAVE";
            bindings = <&KP_QT_SHIFT_DQT>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        KP_SL_SHIFT_BSL: KP_SL_SHIFT_BSL {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_SL_SHIFT_BSL";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        KP_SL_BSL_CTRL_PIPE: KP_SL_BSL_CTRL_PIPE {
            compatible = "zmk,behavior-mod-morph";
            label = "KP_SL_BSL_CTRL_PIPE";
            bindings = <&KP_SL_SHIFT_BSL>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        sticky_forever: sticky_forever {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_FOREVER";
            bindings = <&kp>;
            #binding-cells = <1>;
            ignore-modifiers;
            release-after-ms = <1800000>;
        };

        sm_LCTRL: sm_LCTRL {
            compatible = "zmk,behavior-mod-morph";
            label = "SM_LCTRL";
            bindings = <&sticky_forever LCTRL>, <&release_twice_LCTRL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };

        sm_LSHIFT: sm_LSHIFT {
            compatible = "zmk,behavior-mod-morph";
            label = "SM_LSHIFT";
            bindings = <&sticky_forever LEFT_SHIFT>, <&release_twice_LSHIFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        sm_LALT: sm_LALT {
            compatible = "zmk,behavior-mod-morph";
            label = "SM_LALT";
            bindings = <&sticky_forever LEFT_ALT>, <&release_twice_LALT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        sm_LGUI: sm_LGUI {
            compatible = "zmk,behavior-mod-morph";
            label = "SM_LGUI";
            bindings = <&sticky_forever LEFT_GUI>, <&release_twice_LGUI>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        caps_word_shift: caps_word_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_WORD_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        test: test {
            compatible = "zmk,behavior-send-string";
            label = "TEST";
            #binding-cells = <0>;
            text = ".";
        };
    };

    combos {
        compatible = "zmk,combos";

        extra-nav-left {
            bindings = <&mo 4>;
            key-positions = <33 34>;
        };

        enter-left {
            bindings = <&kp ENTER>;
            key-positions = <25 24>;
        };

        enter-right {
            bindings = <&kp ENTER>;
            key-positions = <27 26>;
        };

        delete-left {
            bindings = <&kp DEL>;
            key-positions = <3 4>;
        };

        delete-right {
            bindings = <&kp DEL>;
            key-positions = <5 6>;
        };

        extra-nav-right {
            bindings = <&mo 4>;
            key-positions = <35 36>;
        };

        esc_left {
            bindings = <&kp ESCAPE>;
            key-positions = <4 14>;
        };

        esc_right {
            bindings = <&kp ESCAPE>;
            key-positions = <5 15>;
        };
    };

    macros {
        release_twice_LCTRL: release_twice_LCTRL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release>, <&kp LCTRL &kp LCTRL>;

            label = "RELEASE_TWICE_LCTRL";
        };

        release_twice_LSHIFT: release_twice_LSHIFT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release>, <&kp LEFT_SHIFT &kp LEFT_SHIFT>;

            label = "RELEASE_TWICE_LSHIFT";
        };

        release_twice_LALT: release_twice_LALT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release>, <&kp LEFT_ALT &kp LEFT_ALT>;

            label = "RELEASE_TWICE_LALT";
        };

        release_twice_LGUI: release_twice_LGUI {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release>, <&kp LEFT_GUI &kp LEFT_GUI>;

            label = "RELEASE_TWICE_LGUI";
        };

        la: la {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp 0>,
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>;

            label = "LA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "BASE";
            bindings = <
         &kp Q  &kp W  &kp E         &kp R  &KP_RU_E_ALT_RU_YO    &kp Y  &kp U                &kp I             &kp O    &kp P
         &kp A  &kp S  &kp D         &kp F  &kp G                 &kp H  &kp J                &kp K             &kp L    &KP_RU_ZH_ALT_RU_H
&kp TAB  &kp Z  &kp X  &kp C         &kp V  &kp B                 &kp N  &KP_RU_MZ_ALT_RU_TZ  &kp COMMA         &kp DOT  &KP_SL_BSL_CTRL_PIPE  &test
                       &kp LEFT_ALT  &la 3  &kp SPACE             &mo 2  &la 1                &caps_word_shift
            >;
        };

        Num {
            bindings = <
            &kp N1   &kp N2          &kp N3         &kp N4          &kp N5             &kp N6   &kp N7     &kp N8      &kp N9    &kp N0
            &kp F11  &kp LEFT_ARROW  &kp UP_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp F12  &sm_LCTRL  &sm_LSHIFT  &sm_LALT  &sm_LGUI
&kp ESCAPE  &kp F1   &kp F2          &kp F3         &kp F4          &kp F5             &kp F6   &kp F7     &kp F8      &kp F9    &kp F10   &UBER_DOT
                                     &kp BACKSPACE  &kp DELETE      &kp ENTER          &trans   &trans     &trans
            >;

            label = "NUM";
        };

        Sym {
            label = "SYM";
            bindings = <
           &kp EXCL      &kp AT         &kp HASH          &kp DOLLAR        &kp PERCENT       &kp CARET        &kp AMPERSAND  &kp SINGLE_QUOTE   &kp DOUBLE_QUOTES  &kp GRAVE
           &kp QUESTION  &kp BACKSLASH  &kp LEFT_BRACKET  &kp LPAR          &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RPAR       &kp RIGHT_BRACKET  &kp SLASH          &kp PIPE
&kp TILDE  &kp COLON     &kp LESS_THAN  &kp EQUAL         &kp GREATER_THAN  &kp QUESTION      &kp UNDERSCORE   &kp MINUS      &kp PLUS           &kp KP_MULTIPLY    &kp SEMICOLON  &kp ENTER
                                        &kp BACKSPACE     &kp DELETE        &kp ENTER         &trans           &trans         &trans
            >;
        };

        Nav {
            bindings = <
        &trans    &trans    &trans      &trans     &trans    &trans          &trans          &trans        &trans           &trans
        &sm_LGUI  &sm_LALT  &sm_LSHIFT  &sm_LCTRL  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans    &trans    &trans      &trans     &trans    &trans          &trans          &trans        &trans           &trans  &trans
                            &trans      &trans     &trans    &trans          &trans          &trans
            >;

            label = "NAV";
        };

        ExtraNav {
            bindings = <
        &trans  &trans          &trans        &trans          &trans             &trans          &trans          &trans        &trans           &trans
        &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans          &trans        &trans          &trans             &trans          &trans          &trans        &trans           &trans  &trans
                                &trans        &trans          &trans             &trans          &trans          &trans
            >;

            label = "EXTRA_NAV";
        };

        Button {
            label = "BUTTON";
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &kp C_VOL_UP  &kp C_BRI_UP  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &trans  &bt BT_SEL 0
        &trans  &trans  &trans  &trans  &trans    &kp C_VOL_DN  &kp C_BRI_DN  &trans                             &trans  &bt BT_SEL 1
&tog 6  &trans  &trans  &trans  &trans  &trans    &kp C_MUTE    &trans        &trans                             &trans  &bt BT_SEL 2  &bt BT_CLR_ALL
                        &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };

        Gaming {
            bindings = <
         &kp ESCAPE        &kp Q  &kp W         &kp E  &kp R        &trans  &trans  &trans  &trans  &trans
         &kp LEFT_SHIFT    &kp A  &kp S         &kp D  &kp F        &trans  &trans  &trans  &trans  &trans
&kp TAB  &kp LEFT_CONTROL  &kp Z  &kp X         &kp C  &kp V        &trans  &trans  &trans  &trans  &trans  &to 0
                                  &kp LEFT_ALT  &mo 7  &kp SPACE    &trans  &trans  &trans
            >;

            label = "GAMING";
        };

        Gaming+ {
            bindings = <
         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &trans  &trans  &trans  &trans  &kp LC(RA(DEL))
         &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0    &kp F5  &trans  &trans  &trans  &trans
&kp TAB  &kp Y         &kp U         &kp I         &kp O         &kp P           &trans  &trans  &trans  &trans  &trans           &kp LA(F4)
                                     &trans        &trans        &trans          &trans  &trans  &trans
            >;

            label = "GAMING+";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        btn_layer {
            if-layers = <1 3>;
            then-layer = <5>;
        };
    };
};
